{"version":3,"sources":["../../src/common/Game.js"],"names":["PADDING","WIDTH","HEIGHT","Square","gameEngine","options","props","status","other","Object","assign","type","BaseTypes","TYPES","INT16","DynamicObject","PlayerController","score","Game","physicsEngine","SimplePhysicsEngine","on","gameLogic","bind","serverSideInit","serverSidePlayerJoined","serverSidePlayerDisconnected","clientSideInit","clientSideDraw","serializer","registerClass","inputData","playerId","playerController","world","queryObject","input","position","y","addObjectToWorld","TwoVector","playerID","ev","controllers","queryObjects","instanceType","controls","KeyboardControls","renderer","clientEngine","bindKey","repeat","updateEl","el","obj","style","top","left","x","squares","document","querySelector","GameEngine"],"mappings":"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","sourcesContent":["import { GameEngine, BaseTypes, TwoVector, DynamicObject, KeyboardControls, SimplePhysicsEngine } from 'lance-gg';\r\n\r\n// /////////////////////////////////////////////////////////\r\n//\r\n// GAME OBJECTS\r\n//\r\n// /////////////////////////////////////////////////////////\r\nconst PADDING = 5;\r\nconst WIDTH = 150;\r\nconst HEIGHT = 100;\r\n\r\n// A paddle has a health attribute\r\nclass Square extends DynamicObject {\r\n\r\n    constructor(gameEngine, options, props) {\r\n        super(gameEngine, options, props);\r\n        this.status = 0;\r\n    }\r\n\r\n    static get netScheme() {\r\n        return Object.assign({\r\n            status: { type: BaseTypes.TYPES.INT16 }\r\n        }, super.netScheme);\r\n    }\r\n\r\n    syncTo(other) {\r\n        super.syncTo(other);\r\n        this.status = other.status;\r\n    }\r\n}\r\n\r\nclass PlayerController extends DynamicObject {\r\n\r\n    constructor(gameEngine, options, props) {\r\n        super(gameEngine, options, props);\r\n        this.score = 0;\r\n    }\r\n\r\n    static get netScheme() {\r\n        return Object.assign({\r\n            score : { type: BaseTypes.TYPES.INT16 }\r\n        }, super.netScheme);\r\n    }\r\n\r\n    syncTo(other) {\r\n        super.syncTo(other);\r\n        this.score = other.score;\r\n    }\r\n}\r\n\r\n\r\n// /////////////////////////////////////////////////////////\r\n//\r\n// GAME ENGINE\r\n//\r\n// /////////////////////////////////////////////////////////\r\nexport default class Game extends GameEngine {\r\n\r\n    constructor(options) {\r\n        super(options);\r\n        this.physicsEngine = new SimplePhysicsEngine({ gameEngine: this });\r\n\r\n        // common code\r\n        this.on('postStep', this.gameLogic.bind(this));\r\n\r\n        // server-only code\r\n        this.on('server__init', this.serverSideInit.bind(this));\r\n        this.on('server__playerJoined', this.serverSidePlayerJoined.bind(this));\r\n        this.on('server__playerDisconnected', this.serverSidePlayerDisconnected.bind(this));\r\n\r\n        // client-only code\r\n        this.on('client__rendererReady', this.clientSideInit.bind(this));\r\n        this.on('client__draw', this.clientSideDraw.bind(this));\r\n    }\r\n\r\n    registerClasses(serializer) {\r\n        serializer.registerClass(Square);\r\n        serializer.registerClass(PlayerController);\r\n    }\r\n\r\n    /* 0 1 2\r\n       3 4 5\r\n       6 7 8 */\r\n    gameLogic() {\r\n        // let squares = this.world.queryObjects({ instanceType: Square });\r\n        // if(squares[0].state==1){\r\n        //     // 0 1 2\r\n        //     if(squares[0].state == squares[1].state && squares[1].state == squares[2].state){\r\n        //         console.log(\"Player 1 wins\");\r\n        //     }\r\n        //     // 0 3 6\r\n        //     else if (squares[0].state == squares[3].state && squares[3].state == squares[6].state){\r\n        //         console.log(\"Player 1 wins\");\r\n        //     }\r\n        //     // 0 4 8\r\n        //     else if (squares[0].state == squares[4].state && squares[4].state == squares[8].state){\r\n        //         console.log(\"Player 1 wins\");\r\n        //     }\r\n        // }\r\n        // else if(squares[4].state==1){\r\n        //     // 3 4 5\r\n        //     if(squares[3].state==squares[4].state && squares[4].state==squares[5].state){\r\n        //         console.log(\"Player 1 wins\");\r\n        //     }\r\n        //     // 1 4 7\r\n        //     else if (squares[1].state==squares[4].state && squares[4].state==squares[7].state){\r\n        //         console.log(\"Player 1 wins\");\r\n        //     }\r\n        //     // 6 4 2\r\n        //     else if ((squares[6].state==squares[4].state && squares[4].state==squares[2].state)){\r\n        //         console.log(\"Player 1 wins\");\r\n        //     }\r\n        // }\r\n        // else if(squares[8].state==1){\r\n        //     // 6 7 8\r\n        //     if(squares[6].state==squares[7].state && squares[7].state==squares[8].state){\r\n        //         console.log(\"Player 1 wins\");\r\n        //     }\r\n        //     // 2 5 8\r\n        //     else if(squares[2].state==squares[5].state && squares[5].state==squares[8].state){\r\n        //         console.log(\"Player 1 wins\");\r\n        //     }\r\n        // }\r\n        // else if(squares[0].state==2){\r\n        //     // 0 1 2\r\n        //     if(squares[0].state == squares[1].state && squares[1].state == squares[2].state){\r\n        //         console.log(\"Player 2 wins\");\r\n        //     }\r\n        //     // 0 3 6\r\n        //     else if (squares[0].state == squares[3].state && squares[3].state == squares[6].state){\r\n        //         console.log(\"Player 2 wins\");\r\n        //     }\r\n        //     // 0 4 8\r\n        //     else if (squares[0].state == squares[4].state && squares[4].state == squares[8].state){\r\n        //         console.log(\"Player 2 wins\");\r\n        //     }\r\n        // }\r\n        // else if(squares[4].state==2){\r\n        //     // 3 4 5\r\n        //     if(squares[3].state==squares[4].state && squares[4].state==squares[5].state){\r\n        //         console.log(\"Player 2 wins\");\r\n        //     }\r\n        //     // 1 4 7\r\n        //     else if (squares[1].state==squares[4].state && squares[4].state==squares[7].state){\r\n        //         console.log(\"Player 2 wins\");\r\n        //     }\r\n        //     // 6 4 2\r\n        //     else if ((squares[6].state==squares[4].state && squares[4].state==squares[2].state)){\r\n        //         console.log(\"Player 2 wins\");\r\n        //     }\r\n        // }\r\n        // else if(squares[8].state==2){\r\n        //     // 6 7 8\r\n        //     if(squares[6].state==squares[7].state && squares[7].state==squares[8].state){\r\n        //         console.log(\"Player 2 wins\");\r\n        //     }\r\n        //     // 2 5 8\r\n        //     else if(squares[2].state==squares[5].state && squares[5].state==squares[8].state){\r\n        //         console.log(\"Player 2 wins\");\r\n        //     }\r\n        // }\r\n    }\r\n\r\n    processInput(inputData, playerId) {\r\n        super.processInput(inputData, playerId);\r\n\r\n        // get the player paddle tied to the player socket\r\n        let playerController = this.world.queryObject({ playerId : playerId });\r\n        if (playerController) {\r\n            if (inputData.input === 'up') {\r\n                playerController.position.y -= 5;\r\n            } else if (inputData.input === 'down') {\r\n                playerController.position.y += 5;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // /////////////////////////////////////////////////////////\r\n    //\r\n    // SERVER ONLY CODE\r\n    //\r\n    // /////////////////////////////////////////////////////////\r\n    serverSideInit() {\r\n        // this.addObjectToWorld(new Square(this, null, { position: new TwoVector(PADDING, PADDING) }));\r\n        // this.addObjectToWorld(new Square(this, null, { position: new TwoVector(PADDING + WIDTH + 5, PADDING) }));\r\n        // this.addObjectToWorld(new Square(this, null, { position: new TwoVector(PADDING + WIDTH + WIDTH + 10, PADDING) }));\r\n        // this.addObjectToWorld(new Square(this, null, { position: new TwoVector(PADDING, PADDING + HEIGHT + 5) }));\r\n        // this.addObjectToWorld(new Square(this, null, { position: new TwoVector(PADDING + WIDTH + 5, PADDING + HEIGHT + 5) }));\r\n        // this.addObjectToWorld(new Square(this, null, { position: new TwoVector(PADDING + WIDTH + WIDTH + 10,  PADDING + HEIGHT + 5) }));\r\n        // this.addObjectToWorld(new Square(this, null, { position: new TwoVector(PADDING, PADDING + HEIGHT + HEIGHT + 10) }));\r\n        // this.addObjectToWorld(new Square(this, null, { position: new TwoVector(PADDING + WIDTH + 5, PADDING + HEIGHT + HEIGHT + 10) }));\r\n        // this.addObjectToWorld(new Square(this, null, { position: new TwoVector(PADDING + WIDTH + WIDTH + 10, PADDING + HEIGHT + HEIGHT + 10) }));\r\n        \r\n        this.addObjectToWorld(new Square(this, null, { position: new TwoVector(WIDTH, 0) }));\r\n        this.addObjectToWorld(new Square(this, null, { position: new TwoVector(WIDTH - PADDING, 0) }));\r\n        this.addObjectToWorld(new Square(this, null, { position: new TwoVector(WIDTH, 0) }));\r\n        this.addObjectToWorld(new Square(this, null, { position: new TwoVector(WIDTH, 0) }));\r\n        this.addObjectToWorld(new Square(this, null, { position: new TwoVector(WIDTH, 0) }));\r\n        this.addObjectToWorld(new Square(this, null, { position: new TwoVector(WIDTH, 0) }));\r\n        this.addObjectToWorld(new Square(this, null, { position: new TwoVector(WIDTH, 0) }));\r\n        this.addObjectToWorld(new Square(this, null, { position: new TwoVector(WIDTH, 0) }));\r\n        this.addObjectToWorld(new Square(this, null, { position: new TwoVector(WIDTH, 0) }));\r\n        this.addObjectToWorld(new PlayerController(this, null, { playerID: 0, position: new TwoVector(WIDTH, 40) }));\r\n        this.addObjectToWorld(new PlayerController(this, null, { playerID: 0, position: new TwoVector(WIDTH, 50) }));\r\n    }\r\n\r\n    // attach newly connected player to next available paddle\r\n    serverSidePlayerJoined(ev) {\r\n        let controllers = this.world.queryObjects({ instanceType: PlayerController });\r\n        if (controllers[0].playerId === 0) {\r\n            controllers[0].playerId = ev.playerId;\r\n        } else if (controllers[1].playerId === 0) {\r\n            controllers[1].playerId = ev.playerId;\r\n        }\r\n    }\r\n\r\n    serverSidePlayerDisconnected(ev) {\r\n        let controllers = this.world.queryObjects({ instanceType: PlayerController });\r\n        if (controllers[0].playerId === ev.playerId) {\r\n            controllers[0].playerId = 0;\r\n        } else if (controllers[1].playerId === ev.playerId) {\r\n            controllers[1].playerId = 0;\r\n        }\r\n    }\r\n\r\n\r\n    // /////////////////////////////////////////////////////////\r\n    //\r\n    // CLIENT ONLY CODE\r\n    //\r\n    // /////////////////////////////////////////////////////////\r\n    clientSideInit() {\r\n        this.controls = new KeyboardControls(this.renderer.clientEngine);\r\n        this.controls.bindKey('up', 'up', { repeat: true } );\r\n        this.controls.bindKey('down', 'down', { repeat: true } );\r\n        \r\n        // this.controls.bindKey('1', '0', { repeat: false } );\r\n        // this.controls.bindKey('2', '1', { repeat: false } );\r\n        // this.controls.bindKey('3', '2', { repeat: false } );\r\n        // this.controls.bindKey('4', '3', { repeat: false } );\r\n        // this.controls.bindKey('5', '4', { repeat: false } );\r\n        // this.controls.bindKey('6', '5', { repeat: false } );\r\n        // this.controls.bindKey('7', '6', { repeat: false } );\r\n        // this.controls.bindKey('8', '7', { repeat: false } );\r\n        // this.controls.bindKey('9', '8', { repeat: false } );\r\n    }\r\n\r\n    clientSideDraw() {\r\n        // function updateSquare(el, obj) {\r\n        //     var squareColor = {\r\n        //         0 : \"white\",\r\n        //         1 : \"red\",\r\n        //         2 : \"blue\"\r\n        //     };\r\n        //     let state = obj.state>0?obj.state:0;\r\n        //     el.style.top = obj.position.y + 10 + \"px\";\r\n        //     el.style.left = obj.position.x + \"px\";\r\n        //     el.style.background = squareColor[state]\r\n        // }\r\n\r\n        // function updateController(el, obj) {\r\n        //     el.style.top = obj.position.y + 10 + \"px\";\r\n        //     el.style.left = obj.position.x + \"px\";\r\n        // }\r\n    \r\n        // let squares = this.world.queryObjects({ instanceType: Square });\r\n        // let controllers = this.world.queryObjects({ instanceType: PlayerController });\r\n        // updateSquare(document.querySelector('.square1'), squares[0]);\r\n        // updateSquare(document.querySelector('.square2'), squares[1]);\r\n        // updateSquare(document.querySelector('.square3'), squares[2]);\r\n        // updateSquare(document.querySelector('.square4'), squares[3]);\r\n        // updateSquare(document.querySelector('.square5'), squares[4]);\r\n        // updateSquare(document.querySelector('.square6'), squares[5]);\r\n        // updateSquare(document.querySelector('.square7'), squares[6]);\r\n        // updateSquare(document.querySelector('.square8'), squares[7]);\r\n        // updateSquare(document.querySelector('.square9'), squares[8]);\r\n        // updateController(document.querySelector('.controller1'), controllers[0]);\r\n        // updateController(document.querySelector('.controller2'), controllers[1]);\r\n\r\n        function updateEl(el, obj) {\r\n            el.style.top = obj.position.y + 10 + \"px\";\r\n            el.style.left = obj.position.x + \"px\";\r\n        }\r\n\r\n        let squares = this.world.queryObjects({ instanceType: Square });\r\n        let controllers = this.world.queryObject({ instanceType: PlayerController });\r\n        updateEl(document.querySelector('.square1'), squares[0]);\r\n        updateEl(document.querySelector('.square2'), squares[1]);\r\n        updateEl(document.querySelector('.square3'), squares[2]);\r\n        updateEl(document.querySelector('.square4'), squares[3]);\r\n        updateEl(document.querySelector('.square5'), squares[4]);\r\n        updateEl(document.querySelector('.square6'), squares[5]);\r\n        updateEl(document.querySelector('.square7'), squares[6]);\r\n        updateEl(document.querySelector('.square8'), squares[7]);\r\n        updateEl(document.querySelector('.square9'), squares[8]);\r\n        updateEl(document.querySelector('.controller1'), controllers[0]);\r\n        updateEl(document.querySelector('.controller2'), controllers[1]);\r\n    }\r\n}\r\n"],"file":"Game.js"}